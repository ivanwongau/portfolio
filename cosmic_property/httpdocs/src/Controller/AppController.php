<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Datasource\ConnectionManager;
use Cake\Event\Event;
use Cake\I18n\Time;
use Cake\Mailer\Email;
/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @link https://book.cakephp.org/3/en/controllers.html#the-app-controller
 */
class AppController extends Controller
{

    

    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this->loadComponent('Security');`
     *
     * @return void
     */

    public function beforeFilter(Event $event)
    {
        $this->Auth->allow(['controller'=>'websites','action'=> 'display','home','aboutus','inspection', 'ltmp', 'bcr',
            'commercons','projmana','contactus','ofitout','defit','induscons','smallcommcons','aptrefur','wareconver',
            'enquiry','controller'=>'users','action'=>'add','verification','forgotpassword','resetpassword','resendemailverif',
            'controller'=>'enquiries','action'=>'add','testLayout','add',
            'controller'=>'Pages','action'=>'home',
            'controller'=>'Invited','action'=>'invitedregister']);

        $this->Auth->authorize = 'controller';
    }

    public function isAuthorized($user)
    {
        parent::isAuthorized($user); // TODO: Change the autogenerated stub
//        if (in_array($this->request->getParam('action'), ['logout'])) {
//            return true;
//        }
    }

    public function initialize()
    {
        parent::initialize();

        $this->loadComponent('RequestHandler', [
            'enableBeforeRedirect' => false,
        ]);
        $this->loadComponent('Flash');

        $this->loadComponent('Recaptcha.Recaptcha');

        //authentication for login
        $this->loadComponent('Auth'
            ,[
                'authorize' => ['Controller'],
                'authenticate'=>[
                    'Form'=>[
                        'fields'=>[
                            'username'=>'email',
                            'password'=>'password'
                        ]
                    ]
                ],
                'loginAction'=>[
                    'controller'=>'Users',
                    'action'=>'login'
                ]
            ]);

        //FOR NOTIFICATION
        //user is logged in
        if($this->Auth->user()){
            $id=$this->Auth->user('id');
            $conn = ConnectionManager::get('default');
            $stmt0to7 = $conn->execute('select b.property_name,s.end_date,b.id from properties b,subscriptions s,properties_users u where b.id=u.property_id
            and s.property_id=b.id and
         UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-'.time().'<='.(7*3600*24).' and
          UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-'.time().'>='.(0*3600*24).' and u.user_id=?', [$id]);
            $rows0to7 = $stmt0to7->fetchAll('assoc');
            $count=0;
            foreach($rows0to7 as $k=>$v){
                $count+=1;
            }

            //when sub is over
            $stmtTermination = $conn->execute('select b.id,b.property_name,b.street_name,s.end_date from properties b,subscriptions s,properties_users u where b.id=u.property_id
            and s.property_id=b.id and
         UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-'.time().'<='.(0).' and u.user_id=?', [$id]);
            $rowsTermination = $stmtTermination->fetchAll('assoc');
            foreach($rowsTermination as $k=>$v){
                $rowsTermination[$k]['end_date'] = date("m/d/Y",strtotime($v['end_date']));
            }


            $this->loadModel('Subscriptions');
            $buiIDS=[];
            foreach($rowsTermination as $item){
                $buiID=$item['id'];
                array_push($buiIDS,$buiID);
            }


            $result=false;
            if (!empty($buiIDS)){
                $subsDataFrom1Building=$this->Subscriptions->find()->where(['property_id IN'=>$buiIDS])->toArray();
                date_default_timezone_set('Australia/Melbourne');
                $time=Time::now();
                $result=($subsDataFrom1Building[sizeof($subsDataFrom1Building)-1]->end_date) <= $time;
            }


            if ($result){
                foreach($rowsTermination as $k=>$v){
                    $count+=1;
                }
            }
            $this->set('count', $count);

            //user data
            //getting user id
            $userid=$this->Auth->user('id');

            //to get the user data
            $this->loadModel('Users');
            $user = $this->Users->get($userid, [
                'contain' => [],
            ]);

            $this->set('user', $user);
            
            //to get the DashboardRename data
            $this->loadModel('DashboardRename');
            $this->set('rename', $this->DashboardRename->find('all'));
        }

        /*
         * Enable the following component for recommended CakePHP security settings.
         * see https://book.cakephp.org/3/en/controllers/components/security.html
         */
        //$this->loadComponent('Security');
    }
}
