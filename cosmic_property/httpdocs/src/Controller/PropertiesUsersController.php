<?php

namespace App\Controller;

use App\Controller\AppController;

/**
 * PropertiesUsers Controller
 *
 * @property \App\Model\Table\PropertiesUsersTable $PropertiesUsers
 *
 * @method \App\Model\Entity\PropertiesUser[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 *
 */
class PropertiesUsersController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function isAuthorized($user)
    {
        // building list is the new index
        if (in_array($this->request->getParam('action'), [
            'add', 'buildinglist', 'edit', 'view', 'logout', 'delete',
            'invite', 'relateduser', 'transfer', 'deleteRelatedUser'
        ])) {
            return true;
        }

        // The owner of an article can edit and delete it
        if (in_array($this->request->getParam('action'), ['index'])) {
            $user = $this->Auth->user();
            if ($user['role'] === 'admin') {
                return true;
            }
        }
        return parent::isAuthorized($user); // TODO: Change the autogenerated stub
    }


    public function index()
    {
        $id = $this->Auth->user('id');

        //to get the user data
        $user = $this->PropertiesUsers->Users->get($id, [
            'contain' => [],
        ]);

        $this->set('user', $user);

        $this->paginate = [
            'contain' => ['Users', 'Properties'],
        ];
        $key=$this->request->getQuery('key');
        if ($key){
            $query=$this->PropertiesUsers->find('all')->where(['OR'=>[
                'access_level like'=>$this->request->getQuery('key'),
                'property_name like'=>'%'.$this->request->getQuery('key').'%',
                'first_name like'=>'%'.$this->request->getQuery('key').'%',
                'last_name like'=>'%'.$this->request->getQuery('key').'%',
                'email like'=>'%'.$this->request->getQuery('key').'%',

            ]],['access_level'=>'string',]);
        }else{
            $query=$this->PropertiesUsers;
        }
        $buildingsUsers = $this->paginate($query);

        $this->set(compact('buildingsUsers'));
    }

    /**
     * View method
     *
     * @param string|null $id Buildings User id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $userid = $this->Auth->user('id');

        //to get the user data
        $user = $this->PropertiesUsers->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);

        $buildingsUser = $this->PropertiesUsers->get($id, [
            'contain' => ['Users', 'Properties'],
        ]);

        $this->set('buildingsUser', $buildingsUser);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($property_id = null)
    {
        //getting user id
        $id = $this->Auth->user('id');

        //to get the user data
        $user = $this->PropertiesUsers->Users->get($id, [
            'contain' => [],
        ]);

        $this->set('user', $user);


        $buildingsUser = $this->PropertiesUsers->newEntity();
        if ($this->request->is('post')) {
            $buildingsUser = $this->PropertiesUsers->patchEntity($buildingsUser, $this->request->getData());
            $buildingsUser->property_id = $property_id;
            $buildingsUser->user_id = $id;
            if ($this->PropertiesUsers->save($buildingsUser)) {
                $this->Flash->success(__('The buildings user has been saved.'));

                return $this->redirect(['controller' => 'properties', 'action' => 'buildinglist']);
            }
            $this->Flash->error(__('The buildings user could not be saved. Please, try again.'));
        }
        $users = $this->PropertiesUsers->Users->find('list', ['limit' => 200])->where(['id' => $id]);
        $buildings = $this->PropertiesUsers->Properties->find('list', ['limit' => 200])->where(['id' => $property_id]);
        $this->set(compact('buildingsUser', 'users', 'buildings'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Properties User id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null, $access_level = null, $designatedUserID = null)
    {
        $userid = $this->Auth->user('id');

        //to get the user data
        $user = $this->PropertiesUsers->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);


        $buildingsUser = $this->PropertiesUsers->get($id, [
            'contain' => [],
        ]);
        //        debug($designatedUserID);
        //        exit();
        if ($this->request->is(['patch', 'post', 'put'])) {
            $buildingsUser = $this->PropertiesUsers->patchEntity($buildingsUser, $this->request->getData());
            if ($this->PropertiesUsers->save($buildingsUser)) {
                $this->Flash->success(__('The buildings user has been saved.'));

                return $this->redirect(['action' => 'relateduser', $buildingsUser->property_id]);
            }
            $this->Flash->error(__('The buildings user could not be saved. Please, try again.'));
        }
        $users = $this->PropertiesUsers->Users->find('list', ['limit' => 200])->where(['id' => $designatedUserID]);
        $buildings = $this->PropertiesUsers->Properties->find('list', ['limit' => 200])->where(['id' => $buildingsUser->property_id]);
        $this->set(compact('buildingsUser', 'users', 'buildings', 'access_level'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Properties User id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        //get the buildings_users id by building id and user id
        $query = $this->PropertiesUsers->find()->select(['id'])->where(['property_id' => $id, 'user_id' => $id = $this->Auth->user('id')])->toList();
        $bsID = $query[0]->id;
        // debug($id);
        // exit;

        $buildingsUser = $this->PropertiesUsers->get($bsID);
        if ($this->PropertiesUsers->delete($buildingsUser)) {
            $this->Flash->success(__('The buildings user has been deleted.'));
        } else {
            $this->Flash->error(__('The buildings user could not be deleted. Please, try again.'));
        }

        return $this->redirect(['controller' => 'properties', 'action' => 'buildinglist']);
    }

    public function invite($builid = null, $access_level = null)
    {
        //getting user id
        $id = $this->Auth->user('id');

        //to get the user data
        $user = $this->PropertiesUsers->Users->get($id, [
            'contain' => [],
        ]);


        $this->set('user', $user);
        $this->set('queryID', '');

        $buildingsUser = $this->PropertiesUsers->newEntity();
        if ($this->request->is('post')) {
            $buildingsUser = $this->PropertiesUsers->patchEntity($buildingsUser, $this->request->getData());
            if ($this->PropertiesUsers->save($buildingsUser)) {
                $this->Flash->success(__('The user has been invited to the building.'));

                return $this->redirect(['controller' => 'properties', 'action' => 'buildinglist']);
            }
            //            $this->Flash->error(__('The buildings user could not be saved. Please, try again.'));
        }

        //        Getting only the user that is not connected to this building
        $userInRelBuilding = $this->PropertiesUsers->find()->where(['property_id' => $builid])->toArray();
        $IDS = [];
        foreach ($userInRelBuilding as $row) {
            array_push($IDS, $row['user_id']);
        }
        $users = $this->PropertiesUsers->Users->find('list', ['limit' => 200])->where(['id NOT IN' => $IDS]);

        $buildings = $this->PropertiesUsers->Properties->find('list', ['limit' => 200])->where(['id' => $builid]);
        $this->set(compact('buildingsUser', 'users', 'buildings'));
        $this->set('access_level', $access_level);

        //invite email who does not have an account
        $this->loadModel('Invited');
        $invited = $this->Invited->newEntity();
        $this->set(compact('invited'));
    }

    public function relateduser($buiID = null)
    {
        $id = $this->Auth->user('id');

        //to get the user data
        $user = $this->PropertiesUsers->Users->get($id, [
            'contain' => [],
        ]);
//debug($user['role']);
//exit();
        $this->set('user', $user);

        $this->paginate = [
            'contain' => ['Users', 'Properties'],
        ];
        $buildingsUsers = $this->paginate($this->PropertiesUsers->find()->where(['property_id' => $buiID]));
        $currentBuildingUser = $this->paginate($this->PropertiesUsers->find()->where(['property_id' => $buiID, 'user_id' => $this->Auth->user('id')]));
        if ($this->Auth->user('role') == 'customer') {
            $access_level = $currentBuildingUser->first()->access_level;
        } else {
            $access_level = 1;
        }

        //        debug($access_level);
        //        exit();


        $this->loadModel('Invited');
        $this->paginate = [
            'contain' => ['Properties'],

        ];
        $invited = $this->paginate($this->Invited->find()->where(['property_id' => $buiID]));

        $this->set(compact('invited'));
        $this->set(compact('buildingsUsers', 'access_level'));
    }

    public function transfer($buiID = null)
    {
        $userid = $this->Auth->user('id');

        //to get the user data
        $user = $this->PropertiesUsers->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);


        $buildingsUser = $this->PropertiesUsers->find()->where(['property_id' => $buiID, 'user_id' => $userid])->first();

        if ($this->request->is(['patch', 'post', 'put'])) {
//            $this->request->allowMethod(['post', 'delete']);
            $request=$this->request->getData();
            $transferedaccount=$this->PropertiesUsers->find()->where(['property_id' => $buiID, 'user_id' => $request['user_id']])->first();
            $transferedaccount->access_level=$buildingsUser->access_level;
            if ($this->PropertiesUsers->save($transferedaccount)) {
                $this->Flash->success(__('The buildings user has been saved.'));

                //delete the access control that the current user has has
                $currentpropertiesusers = $this->PropertiesUsers->get($buildingsUser->id);
                if ($this->PropertiesUsers->delete($currentpropertiesusers)) {
                    $this->Flash->success(__('Your access to this building has been deleted has been deleted.'));
                } else {
                    $this->Flash->error(__('Your access could not be deleted. Please, try again.'));
                }


                return $this->redirect(['controller' => 'properties', 'action' => 'buildinglist']);
            }
            $this->Flash->error(__('The buildings user could not be saved. Please, try again.'));
        }

//        Getting account that already has an access to this building
        if ($buildingsUser->access_level == 1) {
            $userInRelBuilding = $this->PropertiesUsers->find()->where(['property_id' => $buiID, 'access_level <>' => 1])->toArray();
        } elseif ($buildingsUser->access_level == 0) {
            $userInRelBuilding = $this->PropertiesUsers->find()->where(['property_id' => $buiID, 'access_level >' => 1])->toArray();
        } elseif ($buildingsUser->access_level == 2) {
            $userInRelBuilding = $this->PropertiesUsers->find()->where(['property_id' => $buiID, 'access_level >' => 2])->toArray();
        }
        $IDS = [];
        foreach ($userInRelBuilding as $row) {
            array_push($IDS, $row['user_id']);
        }
        $users = $this->PropertiesUsers->Users->find('list', ['limit' => 200])->where(['id IN' => $IDS]);

        //        Getting this building only
        $buildings = $this->PropertiesUsers->Properties->find('list', ['limit' => 200])->where(['id' => $buiID]);

        //getting building data
        $building = $this->PropertiesUsers->Properties->get($buiID, [
            'contain' => ['Users', 'PropertyMultiOwnerships'],
        ]);
        $this->set(compact('buildingsUser', 'users', 'buildings', 'building'));
    }

    public function deleteRelatedUser($id = null)
    {

        $userid = $this->Auth->user('id');

        //to get the user data
        $user = $this->PropertiesUsers->Users->get($userid, [
            'contain' => [],
        ]);

        $this->request->allowMethod(['post', 'delete']);
        $building = $this->PropertiesUsers->get($id);
        $propID = $building->property_id;

        if ($this->PropertiesUsers->delete($building)) {
            $this->Flash->success(__('The building has been deleted.'));
        } else {
            $this->Flash->error(__('The building could not be deleted. Please, try again.'));
        }
        if ($user->role == 'customer') {
            return $this->redirect(['action' => 'relateduser', $propID]);
        } else {
            return $this->redirect(['action' => 'index']);
        }
    }
}
