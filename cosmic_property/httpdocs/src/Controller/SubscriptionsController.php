<?php

namespace App\Controller;

use App\Controller\AppController;
use Cake\I18n\Time;

/**
 * Subscriptions Controller
 *
 * @property \App\Model\Table\SubscriptionsTable $Subscriptions
 *  @property \App\Model\Table\PropertiesTable $Properties
 *
 * @method \App\Model\Entity\Subscription[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class SubscriptionsController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function isAuthorized($user)
    {
        if (in_array($this->request->getParam('action'), ['add', 'buildinglist', 'edit', 'view', 'logout', 'delete', 'renew'])) {
            return true;
        }

        // The owner of an article can edit and delete it
        if (in_array($this->request->getParam('action'), ['index'])) {
            $user = $this->Auth->user();
            if ($user['role'] === 'admin') {
                return true;
            }
        }
        return parent::isAuthorized($user); // TODO: Change the autogenerated stub
    }


    public function index()
    {
        //getting user id
        $userid = $this->Auth->user('id');

        //to get the user data
        $user = $this->Subscriptions->Properties->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);
        //start listing
        $this->paginate = [
            'contain' => ['Properties'],
        ];
        $key=$this->request->getQuery('key');
        if ($key){
            $query=$this->Subscriptions->find('all')->where(['OR'=>[
                'Properties.property_name like'=>'%'.$this->request->getQuery('key').'%',
                'commencement_date like'=>'%'.$this->request->getQuery('key').'%',
                'end_date like'=>'%'.$this->request->getQuery('key').'%',
                'period like'=>$this->request->getQuery('key'),
                'forecast_period_display like'=>$this->request->getQuery('key'),
                'forecast_in_advance like'=>$this->request->getQuery('key'),
            ]],['property_id'=>'string',
                'period'=>'string',
                'forecast_period_display'=>'string',
                'forecast_in_advance'=>'string',]);
        }else{
            $query=$this->Subscriptions;
        }
        $subscriptions = $this->paginate($query);

        $this->set(compact('subscriptions'));
    }

    /**
     * View method
     *
     * @param string|null $id Subscription id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        //getting user id
        $userid = $this->Auth->user('id');

        //to get the user data
        $user = $this->Subscriptions->Properties->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);

        //start view
        $id = $this->Subscriptions->find()->where(['property_id' => $id])->toArray();
        $id = $id[sizeof($id) - 1]->id;
        $subscription = $this->Subscriptions->get($id, [
            'contain' => ['Properties'],
        ]);

        $this->set('subscription', $subscription);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($id = null)
    {
        //getting user id
        $userid = $this->Auth->user('id');

        //to get the user data
        $user = $this->Subscriptions->Properties->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);

        //      Get today date
        $now = Time::now();
        $now->addMonth(6);
        $maxDate =  date_format($now, 'Y-m-d');
        $minDate = date_format(Time::now(), 'Y-m-d');
        $this->set('maxDate', $maxDate);
        $this->set('minDate', $minDate);
        //start adding
        $subscription = $this->Subscriptions->newEntity();
        if ($this->request->is('post')) {
            $result = $this->request->getData();
            $tempcommencementdate = $result['commencement_date'];
            $result['commencement_date'] = [];
            $result['commencement_date']['year'] = substr($tempcommencementdate, 0, 4);
            $result['commencement_date']['month'] = substr($tempcommencementdate, 5, 2);
            $result['commencement_date']['day'] = substr($tempcommencementdate, 8, 2);
            //            debug($result);
            //            debug($tempcommencementdate);
            //            exit();
            $period = $result['period'];
            $result['end_date'] = [];
            $result['end_date']['year'] = (string)($result['commencement_date']['year'] + $period);
            $result['end_date']['month'] = $result['commencement_date']['month'];
            $result['end_date']['day'] = ($result['commencement_date']['day']);
            //            $subscription = $this->Subscriptions->patchEntity($subscription, $result);

            $price = $period * 150;
            //            $data=json_decode(json_encode($subscription),true);
            $data = serialize($result);

            $this->redirect(['controller' => 'Payments', 'action' => 'index', $price, $data]);
        }
        $buildings = $this->Subscriptions->Properties->find('list', ['limit' => 200])->where(['id' => $id]);
        $this->set(compact('subscription', 'buildings'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Subscription id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        //getting user id
        $userid = $this->Auth->user('id');

        //to get the user data
        $user = $this->Subscriptions->Properties->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);

        //start edit
        $subscription = $this->Subscriptions->get($id, [
            'contain' => [],
        ]);
        //        building id
        $buildingid = $this->Subscriptions->find()->where(['id' => $id])->toArray();
        $buildingid = $buildingid[0]->property_id;

        if ($this->request->is(['patch', 'post', 'put'])) {
            $subscription = $this->Subscriptions->patchEntity($subscription, $this->request->getData());
            if ($this->Subscriptions->save($subscription)) {
                $this->Flash->success(__('The subscription has been saved.'));

                return $this->redirect(['controller' => 'subscriptions', 'action' => 'view', $buildingid]);
            }
            $this->Flash->error(__('The subscription could not be saved. Please, try again.'));
        }

        $buildings = $this->Subscriptions->Properties->find('list', ['limit' => 200])->where(['id' => $buildingid]);
        $this->set(compact('subscription', 'buildings', 'buildingid'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Subscription id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $subscription = $this->Subscriptions->get($id);
        if ($this->Subscriptions->delete($subscription)) {
            $this->Flash->success(__('The subscription has been deleted.'));
        } else {
            $this->Flash->error(__('The subscription could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }


    public function renew($id = null)
    {
        //getting user id
        $userid = $this->Auth->user('id');

        //to get the user data
        $user = $this->Subscriptions->Properties->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);

        //start renew
        $subscription = $this->Subscriptions->get($id, [
            'contain' => [],
        ]);
        $orginalYear = (substr($subscription->commencement_date->format('dd-mm-YYYY'), -4));

        if ($this->request->is(['patch', 'post', 'put'])) {
            $result = $this->request->getData();

            $result['building_id'] = (string)($subscription->property_id);
            $result['end_date'] = [];
            $result['commencement_date'] = [];
            $price = $result['period'] * 150;
            $result['period'] = (string)(($subscription->period) + $result['period']);

            $result['commencement_date']['year'] = substr($subscription->commencement_date->format('dd-mm-YYYY'), -4);
            $result['commencement_date']['month'] = substr($subscription->commencement_date->format('dd-mm-YYYY'), 5, 2);
            $result['commencement_date']['day'] = substr($subscription->commencement_date->format('dd-mm-YYYY'), 0, 2);

            $result['end_date']['year'] = ($orginalYear + $result['period']);
            $result['end_date']['month'] = substr($subscription->end_date->format('dd-mm-YYYY'), 5, 2);
            $result['end_date']['day'] = substr($subscription->end_date->format('dd-mm-YYYY'), 0, 2);
            //            debug($price);
            //            exit();


            $data = serialize($result);
            $this->redirect(['controller' => 'Payments', 'action' => 'index2', $price, $data]);
            $subscription = $this->Subscriptions->patchEntity($subscription, $result);
        }


        $buildings = $this->Subscriptions->Properties->find('list', ['limit' => 200])->where(['id' => $subscription->property_id]);
        $this->set(compact('subscription', 'buildings'));
    }
}
