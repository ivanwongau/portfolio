<?php
namespace App\Controller;

use App\Controller\AppController;

/**
 * MultiOwnerships Controller
 *
 * @property \App\Model\Table\MultiOwnershipsTable $MultiOwnerships
 *
 * @method \App\Model\Entity\MultiOwnership[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class MultiOwnershipsController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */

    public function isAuthorized($user)
    {
        if (in_array($this->request->getParam('action'), ['view','add','edit','delete'])) {
            return true;
        }

        // The owner of an article can edit and delete it
        if (in_array($this->request->getParam('action'), ['index'])) {
            $user=$this->Auth->user();
            if ($user['role'] === 'admin' ) {
                return true;
            }
        }
        return parent::isAuthorized($user); // TODO: Change the autogenerated stub
    }


    public function index()
    {
        $this->paginate = [
            'contain' => ['Buildings'],
        ];
        $multiOwnerships = $this->paginate($this->MultiOwnerships);

        $this->set(compact('multiOwnerships'));
    }

    /**
     * View method
     *
     * @param string|null $id Multi Ownership id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        //getting user id
        $userid=$this->Auth->user('id');

        //to get the user data
        $user = $this->MultiOwnerships->Buildings->Users->get($userid, [
            'contain' => [],
        ]);
        $this->set('user', $user);

        //getting multiple ownership details of a building
        $multiOwnership = $this->MultiOwnerships->get($id, [
            'contain' => ['Buildings'],
        ]);

        $this->set('multiOwnership', $multiOwnership);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($id= null)
    {
        //getting user id
        $userid=$this->Auth->user('id');

        //to get the user data
        $user = $this->MultiOwnerships->Buildings->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);


        $multiOwnership = $this->MultiOwnerships->newEntity();
        if ($this->request->is('post')) {
            $multiOwnership = $this->MultiOwnerships->patchEntity($multiOwnership, $this->request->getData());
            if ($this->MultiOwnerships->save($multiOwnership)) {
                $this->Flash->success(__('The multi ownership has been saved.'));

                $buildingid=$multiOwnership->building_id;
                return $this->redirect(['controller'=>'buildings','action' => 'view',$buildingid]);
            }
            $this->Flash->error(__('The multi ownership could not be saved. Please, try again.'));
        }
        $buildings = $this->MultiOwnerships->Buildings->find('list', ['limit' => 200])->where(['id' => $id]);
        $this->set(compact('multiOwnership', 'buildings'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Multi Ownership id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null,$buildingid=null)
    {
        //getting user id
        $userid=$this->Auth->user('id');

        //to get the user data
        $user = $this->MultiOwnerships->Buildings->Users->get($userid, [
            'contain' => [],
        ]);
        $this->set('user', $user);

        //start editing
        $multiOwnership = $this->MultiOwnerships->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $multiOwnership = $this->MultiOwnerships->patchEntity($multiOwnership, $this->request->getData());
            if ($this->MultiOwnerships->save($multiOwnership)) {
                $this->Flash->success(__('The multi ownership has been saved.'));

                return $this->redirect(['controller'=>'buildings','action' => 'view',$buildingid]);
            }
            $this->Flash->error(__('The multi ownership could not be saved. Please, try again.'));
        }
        $buildings = $this->MultiOwnerships->Buildings->find('list', ['limit' => 200])->where(['id' => $buildingid]);
        $this->set(compact('multiOwnership', 'buildings'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Multi Ownership id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $multiOwnership = $this->MultiOwnerships->get($id);
        if ($this->MultiOwnerships->delete($multiOwnership)) {
            $this->Flash->success(__('The multi ownership has been deleted.'));
        } else {
            $this->Flash->error(__('The multi ownership could not be deleted. Please, try again.'));
        }
        $buildingid=$multiOwnership->building_id;
        return $this->redirect(['controller'=>'buildings','action' => 'view',$buildingid]);
    }


}
