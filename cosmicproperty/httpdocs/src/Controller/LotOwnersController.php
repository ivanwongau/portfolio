<?php

namespace App\Controller;

use App\Controller\AppController;
use Cake\ORM\TableRegistry;

/**
 * LotOwners Controller
 *
 * @property \App\Model\Table\LotOwnersTable $LotOwners
 *
 * @method \App\Model\Entity\LotOwner[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class LotOwnersController extends AppController
{


    public function isAuthorized($user)
    {
        if (in_array($this->request->getParam('action'), ['add', 'index', 'edit', 'delete'])) {
            return true;
        }

        // The owner of an article can edit and delete it
        if (in_array($this->request->getParam('action'), ['index'])) {
            $user = $this->Auth->user();
            if ($user['role'] === 'admin') {
                return true;
            }
        }
        return parent::isAuthorized($user); // TODO: Change the autogenerated stub
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['PropertyMultiOwnerships'],
        ];
        $lotOwners = $this->paginate($this->LotOwners);

        $this->set(compact('lotOwners'));
    }

    /**
     * View method
     *
     * @param string|null $id Lot Owner id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $lotOwner = $this->LotOwners->get($id, [
            'contain' => ['PropertyMultiOwnerships'],
        ]);

        $this->set('lotOwner', $lotOwner);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     * 
     */

    public function add($ownership_id)
    {
        $this->viewBuilder()->setLayout('lot_owners_add');


        // get Number of Lots
        $this->loadModel("PropertyMultiOwnerships");
        $query = $this->PropertyMultiOwnerships->get($ownership_id);
        $this->set('number_of_lot', $query->Num_of_lot);
        $this->set('property_id', $query->property_id);





        $lotOwner = $this->LotOwners->newEntity();
        if ($this->request->is('post')) {
            // $lotOwner = $this->LotOwners->patchEntity($lotOwner, $this->request->getData());
            // $lotOwners = $this->LotOwners->newEntities($this->request->getData());
            $lotOwners = $this->getTableLocator()->get('LotOwners');
            $entities = $lotOwners->newEntities($this->request->getData());
            // $lotOwner->ownership_id = $ownership_id;
            debug($entities);
            exit;
            if ($this->LotOwners->save($lotOwner)) {
                $this->Flash->success(__('The lot owner has been saved.'));

                return $this->redirect(['controller' => 'properties', 'action' => 'dashboard', $query->property_id]);
            }
            $this->Flash->error(__('The lot owner could not be saved. Please, try again.'));
        }
        $propertyMultiOwnerships = $this->LotOwners->PropertyMultiOwnerships->find('list', ['limit' => 200]);
        $this->set(compact('lotOwner', 'propertyMultiOwnerships'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Lot Owner id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($ownership_id)
    {
        $this->viewBuilder()->setLayout('lot_owners_add');



        // get Number of Lots
        $this->loadModel("PropertyMultiOwnerships");
        $query = $this->PropertyMultiOwnerships->get($ownership_id);
        $this->set('number_of_lot', $query->Num_of_lot);
        $this->set('property_id', $query->property_id);
        $this->set('number_of_lot_liabilities',$query->Num_of_lot_liabilities);




        $lotOwner = $this->LotOwners->find()
            ->where([
                'ownership_id' => $ownership_id
            ])->toArray();
        $this->set('lotOwner', $lotOwner);
        

        if ($this->request->is(['patch', 'post', 'put'])) {
            $data = [];

            for ($i = 0; $i < count($lotOwner); $i++) {
                $lotOwner_entity = $this->LotOwners->get($lotOwner[$i]['id'], [
                    'contain' => [],
                ]);
                // don't delete this array, I do not know why but it will crash without it.
                $data[$i] = [[
                    // 'id' => "$lotOwner[$i]['id']",
                    'lots_no' => $this->request->getData("lots_no.$i"),
                    'no_liabilities' => $this->request->getData("no_liabilities.$i"),
                    'ownership_id' => "$ownership_id"
                ]];

    
                $entities = $this->LotOwners->patchEntity($lotOwner_entity,$data[$i]);
                $entities->lots_no =  $this->request->getData("lots_no.$i");
                $entities -> no_liabilities = $this->request->getData("no_liabilities.$i");
                $this->LotOwners->save($entities);
            };
  
            if ($this->LotOwners->saveMany($entities)) {
                $this->Flash->success(__('The lot owner has been saved.'));

                return $this->redirect(['controller' => 'properties', 'action' => 'dashboard', $query->property_id]);
            }
            $this->Flash->error(__('The lot owner could not be saved. Please, try again.'));
        }
        $propertyMultiOwnerships = $this->LotOwners->PropertyMultiOwnerships->find('list', ['limit' => 200]);
        $this->set(compact('lotOwner', 'propertyMultiOwnerships'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Lot Owner id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $lotOwner = $this->LotOwners->get($id);
        if ($this->LotOwners->delete($lotOwner)) {
            $this->Flash->success(__('The lot owner has been deleted.'));
        } else {
            $this->Flash->error(__('The lot owner could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
