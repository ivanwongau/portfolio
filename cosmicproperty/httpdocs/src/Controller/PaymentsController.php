<?php

declare(strict_types=1);

namespace App\Controller;

use Cake\Mailer\Email;
use Cake\Routing\Router;
use Cake\Event\Event;
use Cake\Event\EventInterface;
use Cake\Core\Configure;
use Cake\ORM\TableRegistry;
use PayPal\Api\Payer;
use PayPal\Api\Item;
use PayPal\Api\ItemList;
use PayPal\Api\Amount;
use PayPal\Api\Details;
use PayPal\Api\Payment;
use PayPal\Api\PaymentExecution;
use PayPal\Api\Transaction;

/**
 * Payments Controller
 *
 *
 * @method \App\Model\Entity\Payment[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class PaymentsController extends AppController
{


    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function isAuthorized($user)
    {
        if (in_array($this->request->getParam('action'), ['index','status','index2','status2'])) {
            return true;
        }
        return parent::isAuthorized($user); // TODO: Change the autogenerated stub
    }

    public function index($value=null,  $subscriptionData =null)
    {

        //getting user id
        $userid=$this->Auth->user('id');

        //to get the user data
        $this->loadModel('Users');
        $user = $this->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);

        $subsDataCopy=$subscriptionData;
        $subsArray=unserialize($subscriptionData);
        // debug($subsArray);
        // exit;


//        debug($buildingData[0]->name);
//        exit;

        if($this->request->is('post')) {
            $clientId =  Configure::read('Site.PAYPAL_clientId');
            $secret =  Configure::read('Site.PAYPAL_secret');
            $mode =  Configure::read('Site.PAYPAL_mode');
            $apiContext = new \PayPal\Rest\ApiContext(
                new \PayPal\Auth\OAuthTokenCredential(
                    $clientId,  // you will get information about client id and secret once you have created test account in paypal sandbox
                    $secret
                )
            );
            $apiContext->setConfig(['mode' => $mode]);

            $price = $this->request->getData('amount');
            $payer = new Payer();
            $payer->setPaymentMethod('paypal');

            $item_1 = new Item();
            $item_1->setName('Subscription Plan') /** item name **/
            ->setCurrency('AUD')
                ->setQuantity(1)
                ->setPrice($price); /** unit price **/
            $item_list = new ItemList();
            $item_list->setItems(array($item_1));
            $amount = new \PayPal\Api\Amount();
            $amount->setCurrency('AUD')
                ->setTotal($price);
            $transaction = new \PayPal\Api\Transaction();
            $transaction->setAmount($amount)
                ->setItemList($item_list)
                ->setDescription('My subscription');
            $redirect_urls = new \PayPal\Api\RedirectUrls();
            $redirect_urls->setReturnUrl(Router::url(['controller' => 'Payments', 'action' => 'status',$subsDataCopy], true)) /** Specify return URL **/
            ->setCancelUrl(Router::url(['controller' => 'Payments', 'action' => 'status',$subsDataCopy], true));
            $payment = new \PayPal\Api\Payment();
            $payment->setIntent('Sale')
                ->setPayer($payer)
                ->setRedirectUrls($redirect_urls)
                ->setTransactions(array($transaction));
            /** dd($payment->create($this->_api_context));exit; **/
            try {
                $payment->create($apiContext);
            } catch (\PayPal\Exception\PPConnectionException $ex) {
                $this->Flash->error('Something went wrong! Please try again.');
                return $this->redirect(['action'=>'index']);

            }
            foreach ($payment->getLinks() as $link) {
                if ($link->getRel() == 'approval_url') {
                    $redirect = $link->getHref();
                    break;
                }
            }
            $this->getRequest()->getSession()->write('paypalPaymentId',$payment->getId());

            if (isset($redirect)) {
                return $this->redirect($redirect);
            }
            $this->Flash->error('Something went wrong! Please try again.');
            return $this->redirect(['action'=>'index']);
        }
        $this->set('value' ,$value);
        $this->set('subsArray' ,$subsArray);
        $this->loadModel('Properties');
        $buildingData=$this->Properties->find()->where(['id' => $subsArray['building_id']])->toArray();
        $this->set('building_data',$buildingData);
    }




    public function status($subscriptionData=null)
    {
        //getting user id
        $userid=$this->Auth->user('id');

        //to get the user data
        $this->loadModel('Users');
        $user = $this->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);


        $clientId =  Configure::read('Site.PAYPAL_clientId');
        $secret =  Configure::read('Site.PAYPAL_secret');
        $apiContext = new \PayPal\Rest\ApiContext(
            new \PayPal\Auth\OAuthTokenCredential(
                $clientId,
                $secret
            )
        );

        $paymentSessionId = $this->getRequest()->getSession()->read('paypalPaymentId');

        //$this->getRequest()->getSession()->delete('paypalPaymentId');
        $getPayerId = $this->request->getQuery('PayerID');
        $token = $this->request->getQuery('token');


        if (empty($getPayerId) || empty($token)) {
            $this->Flash->error('Something went wrong! Please try again.');
            return $this->redirect(['action'=>'index']);
        }
        $payment = Payment::get($paymentSessionId, $apiContext);
        $execution = new \PayPal\Api\PaymentExecution();
        $execution->setPayerId($getPayerId);

        try {
            $result = $payment->execute($execution, $apiContext);
        }  catch (PayPal\Exception\PPConnectionException $ex) {
            //echo '<pre>';print_r(json_decode($ex->getData()));
            exit;

        }


        if($result->getState() == 'approved') {
            $this->Flash->success('Payment Successfully.');

            //edit building status to active
            $this->loadModel('Properties');
            $this->loadModel('Subscriptions');

            $subscriptionData=unserialize($subscriptionData);
$subscriptionData['property_id']=$subscriptionData['building_id'];
//            add the subscription data
            $subscription = $this->Subscriptions->newEntity(); //property_id
            $subscription = $this->Subscriptions->patchEntity($subscription, $subscriptionData);

            // debug($subscription);
            // debug($subscriptionData);                exit;
            $building_id=$subscriptionData['building_id'];

//save subscription

            $subResult=$this->Subscriptions->save($subscription);
            if ($subResult) {
                $this->Flash->success(__('The subscription has been saved.'));
//                start edit building status
                $building = $this->Properties->get($building_id, [
                    'contain' => [],
                ]);
                $building2 = $this->Properties->get($building_id, [
                    'contain' => [],
                ])->toArray();
                $building2['status']='active';

                $building = $this->Properties->patchEntity($building, $building2);

                //change building status to active
                if ($this->Properties->save($building)) {
                    $this->Flash->success(__('The building status has been changed to active.'));

                    //send email confirmation to the customer
                    $myemail=$user->email;
                    $name=$user->first_name.' '.$user->last_name;
                    $subID=$subResult->id;
                    $buiName=$building2['property_name'];
                    $buiAddress=$building2['street_name'].', '.$building2['city'].', '.$building2['state'].', '.$building2['postcode'];
                    $subCommenceDate=$subResult->commencement_date;
                    $subEndDate=$subResult->end_date;


                    $emailToCustomer = new Email('mailgun');
                    $emailToCustomer
                        ->setTo($myemail)
                        ->setSubject('Cosmic Property Subscription confirmation')
                        ->setFrom(['auto_reply@cosmicproperty.com.au'=>'Cosmic Property'])
                        ->setEmailFormat('html')
                        ->viewBuilder()->setTemplate('payment')
                        ->setVars(['name'=>$name,'subID'=>$subID,'buiName'=>$buiName,'buiAddress'=>$buiAddress,
                            'subCommenceDate'=>$subCommenceDate,'subEndDate'=>$subEndDate]);
                    $emailToCustomer->setAttachments(['logo.png' =>
                        ['file' =>Configure::read('App.imageBaseUrl') . 'logo.png', 'contentId' => '123456']]);

                    if($emailToCustomer->send())
                    {
                        $this->Flash->success(__('Mail sent.'));
                        return $this->redirect(['controller' => 'properties/buildinglist']);
                    }
                    $this->Flash->error(__('Problem during sending email.'));


                    return $this->redirect(['controller' => 'properties/buildinglist']);
                }
                $this->Flash->error(__('There is something wrong editing the building status'));
                return $this->redirect(['controller' => 'properties/buildinglist']);
            }
            $this->Flash->error(__('The subscription could not be saved. Please, try again.'));
            return $this->redirect(['controller'=>'properties','action'=>'buildinglist']);
        }




        $this->Flash->error('Payment failed.');
        return $this->redirect(['controller'=>'properties','action'=>'buildinglist']);
    }

    public function index2($value=null,  $subscriptionData =null)
    {

        //getting user id
        $userid=$this->Auth->user('id');

        //to get the user data
        $this->loadModel('Users');
        $user = $this->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);

        $subsDataCopy=$subscriptionData;
        $subsArray=unserialize($subscriptionData);
        // debug($subsArray);
        // exit;


//        debug($buildingData[0]->name);
//        exit;

        if($this->request->is('post')) {
            $clientId =  Configure::read('Site.PAYPAL_clientId');
            $secret =  Configure::read('Site.PAYPAL_secret');
            $mode =  Configure::read('Site.PAYPAL_mode');
            $apiContext = new \PayPal\Rest\ApiContext(
                new \PayPal\Auth\OAuthTokenCredential(
                    $clientId,  // you will get information about client id and secret once you have created test account in paypal sandbox
                    $secret
                )
            );
            $apiContext->setConfig(['mode' => $mode]);

            $price = $this->request->getData('amount');
            $payer = new Payer();
            $payer->setPaymentMethod('paypal');

            $item_1 = new Item();
            $item_1->setName('Subscription Plan') /** item name **/
            ->setCurrency('AUD')
                ->setQuantity(1)
                ->setPrice($price); /** unit price **/
            $item_list = new ItemList();
            $item_list->setItems(array($item_1));
            $amount = new \PayPal\Api\Amount();
            $amount->setCurrency('AUD')
                ->setTotal($price);
            $transaction = new \PayPal\Api\Transaction();
            $transaction->setAmount($amount)
                ->setItemList($item_list)
                ->setDescription('My subscription');
            $redirect_urls = new \PayPal\Api\RedirectUrls();
            $redirect_urls->setReturnUrl(Router::url(['controller' => 'Payments', 'action' => 'status2',$subsDataCopy], true)) /** Specify return URL **/
            ->setCancelUrl(Router::url(['controller' => 'Payments', 'action' => 'status2',$subsDataCopy], true));
            $payment = new \PayPal\Api\Payment();
            $payment->setIntent('Sale')
                ->setPayer($payer)
                ->setRedirectUrls($redirect_urls)
                ->setTransactions(array($transaction));
            /** dd($payment->create($this->_api_context));exit; **/
            try {
                $payment->create($apiContext);
            } catch (\PayPal\Exception\PPConnectionException $ex) {
                $this->Flash->error('Something went wrong! Please try again.');
                return $this->redirect(['action'=>'index']);

            }
            foreach ($payment->getLinks() as $link) {
                if ($link->getRel() == 'approval_url') {
                    $redirect = $link->getHref();
                    break;
                }
            }
            $this->getRequest()->getSession()->write('paypalPaymentId',$payment->getId());

            if (isset($redirect)) {
                return $this->redirect($redirect);
            }
            $this->Flash->error('Something went wrong! Please try again.');
            return $this->redirect(['action'=>'index']);
        }
        $this->set('value' ,$value);
        $this->set('subsArray' ,$subsArray);
        $this->loadModel('Properties');
        $buildingData=$this->Properties->find()->where(['id' => $subsArray['building_id']])->toArray();
        $this->set('building_data',$buildingData);
    }




    public function status2($subscriptionData=null)
    {
        //getting user id
        $userid=$this->Auth->user('id');

        //to get the user data
        $this->loadModel('Users');
        $user = $this->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);


        $clientId =  Configure::read('Site.PAYPAL_clientId');
        $secret =  Configure::read('Site.PAYPAL_secret');
        $mode =  Configure::read('Site.PAYPAL_mode');
        $apiContext = new \PayPal\Rest\ApiContext(
            new \PayPal\Auth\OAuthTokenCredential(
                $clientId,
                $secret
            )
        );
        $apiContext->setConfig(['mode' => $mode]);

        $paymentSessionId = $this->getRequest()->getSession()->read('paypalPaymentId');

        //$this->getRequest()->getSession()->delete('paypalPaymentId');
        $getPayerId = $this->request->getQuery('PayerID');
        $token = $this->request->getQuery('token');


        if (empty($getPayerId) || empty($token)) {
            $this->Flash->error('Something went wrong! Please try again.');
            return $this->redirect(['action'=>'index']);
        }
        $payment = Payment::get($paymentSessionId, $apiContext);
        $execution = new \PayPal\Api\PaymentExecution();
        $execution->setPayerId($getPayerId);

        try {
            $result = $payment->execute($execution, $apiContext);
        }  catch (PayPal\Exception\PPConnectionException $ex) {
            //echo '<pre>';print_r(json_decode($ex->getData()));
            exit;

        }


        if($result->getState() == 'approved') {
            $this->Flash->success('Payment Successfully.');

            //edit subscription end date and period
            $this->loadModel('Properties');
            $this->loadModel('Subscriptions');
            $subscriptionData=unserialize($subscriptionData);
            $subscriptionData['property_id']=$subscriptionData['building_id'];
            //start edit
            $id=$this->Subscriptions->find()->where(['property_id'=>$subscriptionData['property_id']])->toArray();
            $id=$id[sizeof($id)-1]->id;
            $subscription = $this->Subscriptions->get($id, [
                'contain' => [],
            ]);

//            add the subscription data
            $subscription = $this->Subscriptions->patchEntity($subscription, $subscriptionData);
            if ($this->Subscriptions->save($subscription)) {
                $this->Flash->success(__('The subscription has been saved.'));
                return $this->redirect(['controller'=>'subscriptions','action' => 'view',$subscriptionData['property_id']]);
            }
            $this->Flash->error(__('The subscription could not be saved. Please, try again.'));
            return $this->redirect(['controller'=>'properties','action'=>'buildinglist']);
        }

        $this->Flash->error(__('The payment has failed.'));
        return $this->redirect(['controller'=>'properties','action'=>'buildinglist']);
    }
}
