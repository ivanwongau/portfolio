<?php

namespace App\Controller;

use App\Controller\AppController;
use Cake\Core\Configure;
use Cake\Event\Event;
use Cake\Auth\DefaultPasswordHasher;
use Cake\I18n\Time;
use Cake\Mailer\Email;
use Cake\Utility\Security;
use Cake\Datasource\ConnectionManager;

/**
 * Users Controller
 *
 * @property \App\Model\Table\UsersTable $Users
 *
 * @method \App\Model\Entity\User[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class UsersController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function isAuthorized($user)
    {
        if (in_array($this->request->getParam('action'), ['profile', 'logout', 'profileedit', 'delete', 'notification', 'notauthorized'])) {
            return true;
        }

        // The owner of an article can edit and delete it
        if (in_array($this->request->getParam('action'), ['index', 'edit', 'view'])) {
            $user = $this->Auth->user();
            if ($user['role'] === 'admin') {
                return true;
            } else {
                return $this->redirect(['action' => 'notauthorized']);
            }
        }
        return parent::isAuthorized($user); // TODO: Change the autogenerated stub
    }

    public function notauthorized()
    {

    }

    public function index()
    {
        $key=$this->request->getQuery('key');
        if ($key){
            $query=$this->Users->find('all')->where(['OR'=>[
                'email like'=>'%'.$this->request->getQuery('key').'%',
                'first_name like'=>'%'.$this->request->getQuery('key').'%',
                'last_name like'=>'%'.$this->request->getQuery('key').'%',
                'phone like'=>'%'.$this->request->getQuery('key').'%',
                'company_name like'=>'%'.$this->request->getQuery('key').'%',
                ]]);
        }else{
            $query=$this->Users;
        }

        $users = $this->paginate($query);

        $this->set(compact('users'));

        //getting user id
        $userid = $this->Auth->user('id');

        //to get the user data
        $user = $this->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $user);
    }

    /**
     * View method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => [],
        ]);

        $this->set('userData', $user);


        //getting user id
        $userid = $this->Auth->user('id');

        //to get the user data
        $loggedUser = $this->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $loggedUser);

    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $this->viewBuilder()->setLayout('add');
        $user = $this->Users->newEntity();

        if ($this->request->is('post')) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            $mytoken = Security::hash(Security::randomBytes(32));
            $user->token = $mytoken;
//            debug($this->request->getData('first_name') . " ". $this->request->getData('last_name'));
//            exit;
            if ($this->Users->save($user)) {
                $this->Flash->success2(__('The user has been saved.'));

                //getting email data for customer
                $first_name = $this->request->getData('first_name');
                $last_name = $this->request->getData('last_name');
                $name = $first_name . " " . $last_name;
//                $customerEmail = 'purnomomaximillian@gmail.com';
                $customerEmail = $this->request->getData('email');
                $link = "http://cosmicproperty.com.au/users/verification/" . $mytoken;
//                $link="http://testing-server.u20s2108.monash-ie.me/users/verification/".$mytoken;

                //send email verification to customer
                $emailToCustomer = new Email('mailgun');
                $emailToCustomer
                    ->setTo($customerEmail)
                    ->setSubject('Cosmic Property Email Verification')
                    ->setFrom(['auto_reply@cosmicproperty.com.au' => 'Cosmic Property'])
                    ->setEmailFormat('html')
                    ->viewBuilder()->setTemplate('registration')
                    ->setVars(['name' => $name, 'token' => $link]);
                $emailToCustomer->setAttachments(['logo.png' =>
                    ['file' => Configure::read('App.imageBaseUrl') . 'logo.png', 'contentId' => '123456']]);

                if ($emailToCustomer->send()) {
                    $this->Flash->success2(__('Mail sent.'));
                    return $this->redirect(['controller' => 'users', 'action' => 'login']);
                }
                $this->Flash->error2(__('Problem during sending email.'));

                return $this->redirect(['controller' => 'users', 'action' => 'login']);
            }
            $this->Flash->error2(__('The user could not be saved. Please, try again.'));
        }
        $this->set(compact('user'));
    }


    public function verification($token)
    {
        $this->viewBuilder()->enableAutoLayout(false);
        $verify = $this->Users->find()->where(['token' => $token])->first();
        $verify->verified = 1;
        $this->Users->save($verify);
    }

    /**
     * Edit method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $userEdit = $this->Users->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $userEdit = $this->Users->patchEntity($userEdit, $this->request->getData());
            if ($this->Users->save($userEdit)) {
                $this->Flash->success(__('The user has been saved.'));
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $this->set(compact('userEdit'));


        //getting user id
        $userid = $this->Auth->user('id');

        //to get the user data
        $loggedUser = $this->Users->get($userid, [
            'contain' => [],
        ]);

        $this->set('user', $loggedUser);
    }

    /**
     * Delete method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Users->get($id);
        if ($this->Users->delete($user)) {
            $this->Flash->success(__('The user has been deleted.'));
        } else {
            $this->Flash->error(__('The user could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    //    login
    public function login()
    {

        $this->viewBuilder()->setLayout('login');

        if ($this->request->is('post')) {
            $user = $this->Auth->identify();
//            debug($this->request->getData()); // Return email & with unhashed password
//            debug($user['first_name']);
//            exit();

            if ($user) {
                if ($user['verified'] == 1) {
                    $this->Auth->setUser($user);
                    $id = $this->Auth->user('id');
                    //check subscription
                    //try to get the auto termination
                    $conn = ConnectionManager::get('default');
                    $stmtTermination = $conn->execute('select b.id,b.property_name,b.street_name,s.end_date from properties b,subscriptions s,properties_users u where b.id=u.property_id
            and s.property_id=b.id and
         UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-' . time() . '<=' . (0) . ' and u.user_id=?', [$id]);
                    $rowsTermination = $stmtTermination->fetchAll('assoc');
                    foreach ($rowsTermination as $k => $v) {
                        $rowsTermination[$k]['end_date'] = date("m/d/Y", strtotime($v['end_date']));
                    }
                    //change building status to non active
                    $this->loadModel('Properties');
                    foreach ($rowsTermination as $item) {
                        $buiID = (int)$item['id'];
                        $building = $this->Properties->find()->where(['id' => $buiID])->first();
                        $building->status = 'non active';
                        if ($this->Properties->save($building)) {
//                            $this->Flash->success(__('The building status has been changed.'));

                            return $this->redirect(['action' => 'profile']);
                        }
//                        $this->Flash->error(__('The change could not be saved. Please, try again.'));

                    }


                    return $this->redirect(['controller' => 'Users', 'action' => 'profile']);
                } else {
                    $this->Flash->error2('Please verify your email first!!');
                }
            } //bad login
            else {
                $this->Flash->error2('wrong username or password!');
            }

        }
    }


    //logout
    public function logout()
    {
        $this->Flash->success2('You are logged out');
        return $this->redirect($this->Auth->logout());
    }


    public function profile($id = null)
    {
        $id = $this->Auth->user('id');
        $user = $this->Users->get($id, [
            'contain' => [],
        ]);

        $this->set('user', $user);

    }

    public function profileedit($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'profile']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $this->set(compact('user'));
    }

    public function forgotpassword()
    {

        $this->viewBuilder()->setLayout('forgotpassword');

        if ($this->request->is('post')) {
            $myemail = $this->request->getData('email');
            $mytoken = Security::hash(Security::randomBytes(25));

            $user = $this->Users->find()->where(['email' => $myemail])->first();
            if (!empty($user)) {
//                $user->password = rand();
                $user->token = $mytoken;
//            debug($user);
//            exit();
                if ($this->Users->save($user)) {
                    $this->Flash->success2('The link to reset your password has been sent to your email!');

//                $link='http://testing-server.u20s2108.monash-ie.me/users/resetpassword/'.$mytoken;
                    $link = 'http://cosmicproperty.com.au/users/resetpassword/' . $mytoken;

                    $emailToCustomer = new Email('mailgun');
                    $emailToCustomer
                        ->setTo($myemail)
                        ->setSubject('Cosmic Property Forgot Password')
                        ->setFrom(['auto_reply@cosmicproperty.com.au' => 'Cosmic Property'])
                        ->setEmailFormat('html')
                        ->viewBuilder()->setTemplate('forgetpassword')
                        ->setVars(['email' => $myemail, 'link' => $link]);
                    $emailToCustomer->setAttachments(['logo.png' =>
                        ['file' => Configure::read('App.imageBaseUrl') . 'logo.png', 'contentId' => '123456']]);

                    if ($emailToCustomer->send()) {
                        $this->Flash->success2(__('Mail sent.'));
                        return $this->redirect(['controller' => 'users', 'action' => 'login']);
                    }
                    $this->Flash->error2(__('Problem during sending email.'));
                }
            } else {
                $this->Flash->error2('No user found with this email');
                $this->redirect(['action' => 'forgotpassword']);
            }
        }
    }

    public function resetpassword($token)
    {

        $this->viewBuilder()->setLayout('resetpassword');

        if ($this->request->is('post')) {
            $newPass = $this->request->getData('password');
            $newtoken = Security::hash(Security::randomBytes(25));
            $user = $this->Users->find()->where(['token' => $token])->first();
            $user->password = $newPass;
            $user->token = $newtoken;
            if ($this->Users->save($user)) {
                return $this->redirect(['controller' => 'users', 'action' => 'login']);
            }
        }
    }

    public function notification()
    {
        $id = $this->Auth->user('id');
        $user = $this->Users->get($id, [
            'contain' => [],
        ]);

        $this->set('user', $user);

        //between 0 and 7 days inclusive
        $conn = ConnectionManager::get('default');
//        'select b.id,b.property_name,b.street_name,s.end_date from properties b,subscriptions s,properties_users u where b.id=u.property_id
//            and s.property_id=b.id and
//         UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-
        $stmt0to7 = $conn->execute('select b.property_name,s.end_date,b.id from properties b,subscriptions s,properties_users u where b.id=u.property_id
            and s.property_id=b.id and
         UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-' . time() . '<=' . (7 * 3600 * 24) . ' and
          UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-' . time() . '>=' . (0 * 3600 * 24) . ' and u.user_id=?', [$id]);
        $rows0to7 = $stmt0to7->fetchAll('assoc');
        foreach ($rows0to7 as $k => $v) {
            $rows0to7[$k]['end_date'] = date("m/d/Y", strtotime($v['end_date']));
        }

        $this->set('slist0to7', $rows0to7);

        //between 8 and 14 days inclusive
        $stmt8to14 = $conn->execute('select b.property_name,s.end_date,b.id from properties b,subscriptions s,properties_users u where b.id=u.property_id
            and s.property_id=b.id and
         UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-' . time() . '<=' . (14 * 3600 * 24) . ' and
          UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-' . time() . '>=' . (8 * 3600 * 24) . ' and u.user_id=?', [$id]);
        $rows8to14 = $stmt8to14->fetchAll('assoc');
        foreach ($rows8to14 as $k => $v) {
            $rows8to14[$k]['end_date'] = date("m/d/Y", strtotime($v['end_date']));
        }

        $this->set('slist8to14', $rows8to14);


        //between 15 and 30 days inclusive
        $stmt15to30 = $conn->execute('select b.property_name,s.end_date,b.id from properties b,subscriptions s,properties_users u where b.id=u.property_id
            and s.property_id=b.id and
         UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-' . time() . '<=' . (30 * 3600 * 24) . ' and
          UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-' . time() . '>=' . (15 * 3600 * 24) . ' and u.user_id=?', [$id]);
        $rows15to30 = $stmt15to30->fetchAll('assoc');
        foreach ($rows15to30 as $k => $v) {
            $rows15to30[$k]['end_date'] = date("m/d/Y", strtotime($v['end_date']));
        }

        $this->set('slist15to30', $rows15to30);

        //when sub is over
        $stmtTermination = $conn->execute('select b.id,b.property_name,b.street_name,s.end_date from properties b,subscriptions s,properties_users u where b.id=u.property_id
            and s.property_id=b.id and
         UNIX_TIMESTAMP(STR_TO_DATE(s.end_date,"%Y-%m-%d %H:%i:%s"))-' . time() . '<=' . (0) . ' and u.user_id=?', [$id]);
        $rowsTermination = $stmtTermination->fetchAll('assoc');
        foreach ($rowsTermination as $k => $v) {
            $rowsTermination[$k]['end_date'] = date("m/d/Y", strtotime($v['end_date']));
        }


        $this->loadModel('Subscriptions');
        $buiIDS = [];
        foreach ($rowsTermination as $item) {
            $buiID = $item['id'];
            array_push($buiIDS, $buiID);
        }


        $result = false;
        if (!empty($buiIDS)) {
            $subsDataFrom1Building = $this->Subscriptions->find()->where(['property_id IN' => $buiIDS])->toArray();
            date_default_timezone_set('Australia/Melbourne');
            $time = Time::now();
            $result = ($subsDataFrom1Building[sizeof($subsDataFrom1Building) - 1]->end_date) <= $time;
        }
//        debug($result);
//        exit();
        if ($result) {
            $this->set('slistTerminated', $rowsTermination);
        } else {
            $this->set('slistTerminated', $rowsTermination = []);
        }


    }

    public function resendemailverif()
    {
        if ($this->request->is('post')) {
            $myemail = $this->request->getData('email');
            $mytoken = Security::hash(Security::randomBytes(25));

            $user = $this->Users->find()->where(['email' => $myemail])->first();
            if (!empty($user)) {
                $user->token = $mytoken;
//            debug($user);
//            exit();
                if ($this->Users->save($user)) {

//                $link='http://testing-server.u20s2108.monash-ie.me/users/resetpassword/'.$mytoken;
                    $link = "http://cosmicproperty.com.au/users/verification/" . $mytoken;

                    //send email verification to customer
                    $emailToCustomer = new Email('mailgun');
                    $emailToCustomer
                        ->setTo($myemail)
                        ->setSubject('Cosmic Property Account Verification')
                        ->setFrom(['auto_reply@cosmicproperty.com.au' => 'Cosmic Property'])
                        ->setEmailFormat('html')
                        ->viewBuilder()->setTemplate('registration')
                        ->setVars(['name' => $myemail, 'token' => $link]);
                    $emailToCustomer->setAttachments(['logo.png' =>
                        ['file' => Configure::read('App.imageBaseUrl') . 'logo.png', 'contentId' => '123456']]);

                    if ($emailToCustomer->send()) {
                        $this->Flash->success2('The link to verify your email has been sent to your email!');
                        return $this->redirect(['controller' => 'users', 'action' => 'login']);
                    }
                    $this->Flash->error2(__('Problem during sending email.'));

                    return $this->redirect(['controller' => 'users', 'action' => 'login']);
                }
            } else {
                $this->Flash->error2('No user found with this email');
                $this->redirect(['action' => 'resendemailverif']);
            }
        }
    }
    }
